#!/bin/sh
#
#  Installs a Fish, Sway. Neovim, Git, SSH and Bash based
#  software development environment into the $HOME directory
#  of my Wayland/Systemd based Arch Linux systems.
#
#  Usage: ./dotfilesInstall
#
#         run from the root of the cloned dotfiles repo
#
#  Note: Assuming $XDG_CONFIG_HOME & $HOME do not
#        contain whitespace.  Due to $RM_ITEMS.
#
#        Prefer keeping this a very simple POSIX script
#        than having to bulletproof something fancier.
#

### Setup
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:=$HOME/.config}"
umask 0022

HOME_FILES='
   .bash_profile
   .bashrc
   .bashrc_functions
   .bash_sessions_disable
   .inputrc
'

BIN_SCRIPTS='
   bsPacker
   buArch
   digpath
   monitor
   pathtrim
   rt
   spin
   viewJarManifest
'

SSH_CONFIGS='
   config
'

CABAL_CONFIGS='
   config
'

CONFIG_FILES='
   alacritty/alacritty_arch.yml
   fish/completions/alacritty.fish
   fish/config.fish
   fish/functions/archJDK.fish
   fish/functions/ax.fish
   fish/functions/digpath.fish
   fish/functions/ev.fish
   fish/functions/ff.fish
   fish/functions/fields.fish
   fish/functions/fishterm.fish
   fish/functions/fm.fish
   fish/functions/fish_greeting.fish
   fish/functions/fish_mode_prompt.fish
   fish/functions/fish_prompt.fish
   fish/functions/fish_title.fish
   fish/functions/la.fish
   fish/functions/lbry.fish
   fish/functions/ldot.fish
   fish/functions/lh.fish
   fish/functions/ll.fish
   fish/functions/nsort.fish
   fish/functions/pathtrim.fish
   fish/functions/rc.fish
   fish/functions/ud.fish
   fish/functions/Wget.fish
   fish/functions/WgetM.fish
   git/config
   nvim/init.lua
   nvim/lua/grs/appearance.lua
   nvim/lua/grs/commands.lua
   nvim/lua/grs/completions.lua
   nvim/lua/grs/devel_environment.lua
   nvim/lua/grs/options.lua
   nvim/lua/grs/telescope.lua
   nvim/lua/grs/textedit.lua
   nvim/lua/grs/util/keymappings.lua
   nvim/lua/grs/util/packer.lua
   sway/config
   waybar/config
   waybar/style.css
   wofi/config
'

RM_ITEMS="
   ${HOME}/.gitconfig
   ${XDG_CONFIG_HOME}/nvim/lua/grs/Colorscheme.lua
   ${XDG_CONFIG_HOME}/nvim/lua/grs/Commands.lua
   ${XDG_CONFIG_HOME}/nvim/lua/grs/Completions.lua
   ${XDG_CONFIG_HOME}/nvim/lua/grs/DevEnv.lua
   ${XDG_CONFIG_HOME}/nvim/lua/grs/KeyMappings.lua
   ${XDG_CONFIG_HOME}/nvim/lua/grs/Options.lua
   ${XDG_CONFIG_HOME}/nvim/lua/grs/Packer.lua
   ${XDG_CONFIG_HOME}/nvim/lua/grs/Telescope.lua
   ${XDG_CONFIG_HOME}/nvim/lua/grs/TextEdit.lua
   ${XDG_CONFIG_HOME}/nvim/lua/grs/Treesitter.lua
"

## Function to removes files
remove_item () {
   rmItem="$1"

   test ! -e "$rmItem" ||
      rm -r "$rmItem" 2>&- || {
         printf '\n'
         printf "Error: Failed to remove item '%s'\\n" "$rmItem" >&2
         return 1
      }
   return 0
}

## Function to install files
install_file () {
   install_dir="$1"
   file_path="$2"
   src_dir="$3"
   file_perm="$4"
   src="$src_dir/$file_path"
   trgt="$install_dir/$file_path"
   trgt_dir="${trgt%/*}"

   test -d "$trgt_dir" || mkdir -p "$trgt_dir" || {
      printf '\n'
      printf "Error: Failed to create '%s' directory,\\n" "$trgt_dir" >&2
      printf "       punting on installing '%s' config file\\n" "$trgt" >&2
      return 1
   }

   # Install file
   if cp "$src" "$trgt"
   then
      chmod "$file_perm" "$trgt" || {
         printf '\n'
         printf "Error: Failed to set permissions on '%s' to '%s'\\n" "$trgt" "$file_perm" >&2
         return 1
      }
   else
      printf "Error: Failed to install '%s'\\n" "$trgt" >&2
      return 1
   fi
   return 0
}

### Install files

## Install home directory dotfiles
for Home_File in $HOME_FILES
do
   install_file "$HOME" "$Home_File" ./home 0644
done

## Install  ~/bin  scripts
for File in $BIN_SCRIPTS
do
   install_file "$HOME/bin" "$File" ./bin 0755
done

## Install configuration files

# Install SSH Configs
for conf_file in $SSH_CONFIGS
do
   install_file ~/.ssh "$conf_file" ./ssh 0600 || exit 1
done
chmod 0700 ~/.ssh

# Install Cabal Configs for Haskell
for conf_file in $CABAL_CONFIGS
do
   install_file ~/.cabal "$conf_file" ./cabal 0644 || exit 1
done

# Install $XDG_CONFIG_HOME files
for conf_file in $CONFIG_FILES
do
   install_file "$XDG_CONFIG_HOME" "$conf_file" ./config 0644 || exit 1
done

# Keep alacritty from rereading its config file mid-copy
mv "${XDG_CONFIG_HOME}"/alacritty/alacritty{_arch,}.yml

# Swap in a Sway background image if present
Picture="${HOME}/Pictures/Nature/Antarctica-sunset-1920x1080.jpg"
if [ -f $Picture ]
then
    mv "${XDG_CONFIG_HOME}"/sway/config{,_orig} 
    sed -e "s|^\(output \* bg \).* solid_color$|\1$Picture fill|" \
        "${XDG_CONFIG_HOME}"/sway/config_orig > \
        "${XDG_CONFIG_HOME}"/sway/config
    rm -f "${XDG_CONFIG_HOME}"/sway/config_orig
fi

### Some final tweaks and clean up

## Create ~/catch, for scp and downloads
test -d ~/catch || mkdir ~/catch || {
   printf '\n'
   printf "Warning: Failed to create '~/catch'.\\n" >&2
}
test -d ~/.local/bin || mkdir ~/.local/bin || {
   printf '\n'
   printf "Warning: Failed to create '~/.local/bin'.\\n" >&2
}
test -d ~/.cabal/bin || mkdir ~/.cabal/bin || {
   printf '\n'
   printf "Warning: Failed to create '~/.cabal/bin'.\\n" >&2
}

## Remove no longer needed files and directories.
for Item in $RM_ITEMS
do
   remove_item "$Item" || exit 1
done
