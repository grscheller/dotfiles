#!/bin/sh
#
#  Installs my Fish, Sway. Neovim, Git, SSH and Bash based
#  software development environment into my $HOME directory.
#
#  Usage: dfInstall [-c {install|repo|target}]
#
#  Note: Assuming $XDG_CONFIG_HOME & $HOME do not contain
#        whitespace.  Due to their use in $RM_ITEMS.
#

### Setup

XDG_CONFIG_HOME="${XDG_CONFIG_HOME:=$HOME/.config}"
DOTFILE_GIT_REPO="${DOTFILE_GIT_REPO:=$HOME/devel/dotfiles}"
umask 0022

cd "$DOTFILE_GIT_REPO" || {
   printf '\n'
   printf "Error: Failed to cd into '%s'\\n" "$DOTFILE_GIT_REPO"
   return 1
}

### Configuration

HOME_FILES='
   .bash_profile
   .bashrc
   .inputrc
'

# Do not install dotfilesInstall, systemfilesInstall, grsSwap
BIN_SCRIPTS='
   bsPacker
   buArch
   chkcolor
   digpath
   monitor
   pathtrim
   rt
   spin
   viewJarManifest
'

BLOOP_FILES='
   bloop.json
'

CABAL_CONFIGS='
   config
'

CONFIG_FILES='
   alacritty/alacritty_arch.yml
   fish/completions/alacritty.fish
   fish/conf.d/abbrs.fish
   fish/conf.d/colors.fish
   fish/config.fish
   fish/functions/archJDK.fish
   fish/functions/ax.fish
   fish/functions/cu.fish
   fish/functions/digpath.fish
   fish/functions/disable_touch_pad.fish
   fish/functions/enable_touch_pad.fish
   fish/functions/ev.fish
   fish/functions/fdot.fish
   fish/functions/ff.fish
   fish/functions/fields.fish
   fish/functions/fishterm.fish
   fish/functions/fm.fish
   fish/functions/fish_greeting.fish
   fish/functions/fish_mode_prompt.fish
   fish/functions/fish_prompt.fish
   fish/functions/fish_title.fish
   fish/functions/la.fish
   fish/functions/lbry.fish
   fish/functions/ldir.fish
   fish/functions/ldot.fish
   fish/functions/lf.fish
   fish/functions/lh.fish
   fish/functions/ll.fish
   fish/functions/nsort.fish
   fish/functions/pathtrim.fish
   fish/functions/rc.fish
   fish/functions/ud.fish
   fish/functions/Wget.fish
   fish/functions/WgetM.fish
   fish/functions/b2b.fish
   fish/functions/b2d.fish
   fish/functions/b2h.fish
   fish/functions/b2o.fish
   fish/functions/d2b.fish
   fish/functions/d2d.fish
   fish/functions/d2h.fish
   fish/functions/d2o.fish
   fish/functions/h2b.fish
   fish/functions/h2d.fish
   fish/functions/h2h.fish
   fish/functions/h2o.fish
   fish/functions/o2b.fish
   fish/functions/o2d.fish
   fish/functions/o2h.fish
   fish/functions/o2o.fish
   git/config
   nvim/ftplugin/c.lua
   nvim/ftplugin/c8.lua
   nvim/ftplugin/cpp.lua
   nvim/ftplugin/fish.lua
   nvim/ftplugin/haskell.lua
   nvim/ftplugin/html.lua
   nvim/ftplugin/lua.lua
   nvim/ftplugin/markdown.lua
   nvim/ftplugin/rust.lua
   nvim/ftplugin/sbt.lua
   nvim/ftplugin/scala.lua
   nvim/ftplugin/sh.lua
   nvim/lua/grs/config/autocmds.lua
   nvim/lua/grs/config/colors.lua
   nvim/lua/grs/config/icons.lua
   nvim/lua/grs/config/keymaps.lua
   nvim/lua/grs/config/mason.lua
   nvim/lua/grs/config/options.lua
   nvim/lua/grs/config/treesitter.lua
   nvim/lua/grs/plugins/util/dap.lua
   nvim/lua/grs/plugins/util/lspconfig.lua
   nvim/lua/grs/plugins/util/mason.lua
   nvim/lua/grs/plugins/util/nullLs.lua
   nvim/lua/grs/plugins/config.lua
   nvim/lua/grs/plugins/cmp.lua
   nvim/lua/grs/plugins/early.lua
   nvim/lua/grs/plugins/lazy.lua
   nvim/lua/grs/plugins/lspconfig.lua
   nvim/lua/grs/plugins/telescope.lua
   nvim/lua/grs/plugins/textedit.lua
   nvim/lua/grs/plugins/treesitter.lua
   nvim/lua/grs/plugins/mason.lua
   nvim/lua/grs/plugins/whichkey.lua
   nvim/lua/grs/util.lua
   nvim/init.lua
   sway/config
   waybar/config
   waybar/style.css
   wofi/config
'

SSH_CONFIGS='
   config
'

RM_ITEMS="
   ${HOME}/.gitconfig
   ${XDG_CONFIG_HOME}/fish/functions/unguard_universals.fish
   ${XDG_CONFIG_HOME}/nvim/lua/grs/config/lazy.lua
   ${XDG_CONFIG_HOME}/nvim/lua/grs/config/settings.lua
"

### Argument parsing, last -c option wins, default is to install

usage='Usage: dfInstall [-c {install|repo|target}]'
check=install
while getopts c: opt
do
   case "$opt" in
      c)    check="$OPTARG";;
      \?)   printf '%s\n' "$usage"; exit 2;;
   esac
done
shift $((OPTIND - 1))

if [ "$check"x = installx ] || [ "$check"x = repox ] || [ "$check"x = targetx ]
then
   :
else
   printf '\n%s\n' "$usage"
   return 2
fi

### Functions

## Function to removes files
remove_item () {
   rm_item="$1"

   if [ "$check"x = installx ]
   then
      # Remove the item
      test ! -e "$rm_item" ||
         rm -r "$rm_item" 2>&- || {
            printf '\n'
            printf "Warning: Failed to remove item '%s'\\n" "$rm_item"
         }
   elif [ "$check"x = targetx ]
   then
      # Check if item needs removing
      test -e "$rm_item" && printf '%s needs removing' "$rm_item"
   fi
}

## Function to install files
install_file () {
   install_dir="$1"
   file_path="$2"
   src_dir="$3"
   file_perm="$4"
   src="$src_dir/$file_path"
   trgt="$install_dir/$file_path"
   trgt_dir="${trgt%/*}"

   if [ "$check"x = installx ]
   then
      # Make sure target directory exists
      test -d "$trgt_dir" || mkdir -p "$trgt_dir" || {
         printf '\n'
         printf "Error: Failed to create '%s' directory,\\n" "$trgt_dir"
      }

      # Install the file
      if cp "$src" "$trgt"
      then
         chmod "$file_perm" "$trgt" || {
            printf '\n'
            printf "Error: Failed to set permissions on '%s' to '%s'\\n" "$trgt" "$file_perm"
         }
      else
         printf "Error: Failed to install '%s'\\n" "$trgt"
      fi
   elif [ "$check"x = repox ]
   then
      # Compare config (this script) with dotfile repo working directory
      test -e "$src" || printf '%s not in git working directory\n' "$src"
   elif [ "$check"x = targetx ]
   then
      # Compare config (this script) with install target
      diff -q "$src" "$trgt" 2>&1 | sed 's/^diff: //'
   fi
}

### Install or check dotfiles

## Install home directory files
for home_file in $HOME_FILES
do
   install_file "$HOME" "$home_file" ./home 0644
done

## Install  ~/bin  scripts
for bin_file in $BIN_SCRIPTS
do
   install_file "$HOME/bin" "$bin_file" ./home/bin 0755
done
chmod 0755 "$HOME/bin"

## Install configuration files

# Install Bloop Configs for Scala
for conf_file in $BLOOP_FILES
do
   install_file "$HOME/.bloop" "$conf_file" ./home/bloop 0600
done
chmod 0755 "$HOME/.bloop"

# Install Cabal Configs for Haskell
for conf_file in $CABAL_CONFIGS
do
   install_file "$HOME/.cabal" "$conf_file" ./home/cabal 0644
done
chmod 0755 "$HOME/.cabal"

# Install $XDG_CONFIG_HOME files
for conf_file in $CONFIG_FILES
do
   install_file "$XDG_CONFIG_HOME" "$conf_file" ./config 0644
done
chmod 0700 "$HOME/.config"

# Install SSH Configs
for conf_file in $SSH_CONFIGS
do
   install_file "$HOME/.ssh" "$conf_file" ./home/ssh 0600
done
chmod 0700 "$HOME/.ssh"

### Some final tweaks, checks & cleanup

if [ "$check"x = installx ]
then
   # Remove no longer needed files and directories
   for item in $RM_ITEMS
   do
       remove_item "$item"
   done

   # Create needed missing directories
   test -d "$HOME/catch" || mkdir "$HOME/catch" || {
      printf "\\nWarning: Failed to create '~/catch'.\\n"
   }
   test -d "$HOME/.local/bin" || mkdir -p "$HOME/.local/bin" || {
      printf "\\nWarning: Failed to create '~/.local/bin'.\\n"
   }
   test -d "$HOME/.cabal/bin" || mkdir -p "$HOME/.cabal/bin" || {
      printf "\\nWarning: Failed to create '~/.cabal/bin'.\\n"
   }

   # Keep alacritty from rereading its config file mid-copy
   mv "${XDG_CONFIG_HOME}"/alacritty/alacritty_arch.yml \
      "${XDG_CONFIG_HOME}"/alacritty/alacritty.yml
   
   # Swap in a Sway background image if present, the picture I personally use
   # is from 'https://www.facebook.com/alittleofmeinyou/photos/325964185818238'
   Picture="${HOME}/Pictures/Desktops/SwayBG.jpg"
   if [ -f "$Picture" ]
   then
      mv "${XDG_CONFIG_HOME}"/sway/config "${XDG_CONFIG_HOME}"/sway/config_orig
      sed -e "s|^\( *output \* bg \).* solid_color$|\1$Picture fill|" \
         "${XDG_CONFIG_HOME}"/sway/config_orig > "${XDG_CONFIG_HOME}"/sway/config
      rm -f "${XDG_CONFIG_HOME}"/sway/config_orig
   fi
elif [ "$check"x = repox ]
then
   # Get some git status info on repo
   printf '\nGit Status:\n'
   git status -s
elif [ "$check"x = targetx ]
then
   # Check for missing directories
   test -d "$HOME/catch" || printf '%s does not exist\n' "$HOME/catch/"
   test -d "$HOME/.local/bin" || printf '%s does not exist\n' "$HOME/.local/bin/"
   test -d "$HOME/.cabal/bin" || printf '%s does not exist\n' "$HOME/.cabal/bin/"

   # Check for no longer needed target files and directories
   for item in $RM_ITEMS
   do
      test -e "$item" && printf '%s needs to be deleted\n' "$item"
   done
fi
