#!/bin/sh
#
#  Installs my Neovim, Fish, Sway, Git, SSH and Bash based
#  software development environment into my $HOME directory.
#
#  Note: Assuming $XDG_CONFIG_HOME & $HOME do not contain
#        whitespace.  Due to their use in $RM_ITEMS and
#        me wanting to keep the shell scripting simple.
#
#  Note: To the best of my knowledge this is a fully POSIX compliant
#        shell script.  Tested regularly against dash, where on my
#        Arch Linux systems I set /usr/bin/sh -> /usr/bin/dash and
#        Arch sets /bin -> /usr/bin for POSIX compliance.
#

### Usage

usage='Usage: dfInstall [-c {install|repo|target}]'

### Setup

XDG_CONFIG_HOME="${XDG_CONFIG_HOME:=$HOME/.config}"
DOTFILE_GIT_REPO="${DOTFILE_GIT_REPO:=$HOME/devel/dotfiles}"
umask 0022

cd "$DOTFILE_GIT_REPO" || {
   printf "\\nError: Failed to cd into '%s'\\n" "$DOTFILE_GIT_REPO"
   return 1
}

### Configuration

HOME_FILES='
   .bash_profile
   .bashrc
   .inputrc
'

BIN_SCRIPTS='
   buArch
   chkcolor
   codepoint
   digpath
   monitor
   pathtrim
   rt
   spin
   viewJarManifest
'

BLOOP_FILES='
   bloop.json
'

CABAL_CONFIGS='
   config
'

CONFIG_FILES='
   alacritty/alacritty_arch.yml
   fish/completions/alacritty.fish
   fish/config.fish
   fish/conf.d/00-ensure-or-redo-init-env.fish
   fish/conf.d/abbrs.fish
   fish/conf.d/colors.fish
   fish/functions/archJDK.fish
   fish/functions/ax.fish
   fish/functions/cu.fish
   fish/functions/digpath.fish
   fish/functions/disable_touch_pad.fish
   fish/functions/enable_touch_pad.fish
   fish/functions/ev.fish
   fish/functions/fdot.fish
   fish/functions/ff.fish
   fish/functions/fields.fish
   fish/functions/fishterm.fish
   fish/functions/fm.fish
   fish/functions/fish_greeting.fish
   fish/functions/fish_mode_prompt.fish
   fish/functions/fish_prompt.fish
   fish/functions/fish_title.fish
   fish/functions/la.fish
   fish/functions/lbry.fish
   fish/functions/ldir.fish
   fish/functions/ldot.fish
   fish/functions/lf.fish
   fish/functions/lh.fish
   fish/functions/ll.fish
   fish/functions/nsort.fish
   fish/functions/pathtrim.fish
   fish/functions/rc.fish
   fish/functions/ud.fish
   fish/functions/Wget.fish
   fish/functions/WgetM.fish
   fish/functions/b2b.fish
   fish/functions/b2d.fish
   fish/functions/b2h.fish
   fish/functions/b2o.fish
   fish/functions/d2b.fish
   fish/functions/d2d.fish
   fish/functions/d2h.fish
   fish/functions/d2o.fish
   fish/functions/h2b.fish
   fish/functions/h2d.fish
   fish/functions/h2h.fish
   fish/functions/h2o.fish
   fish/functions/o2b.fish
   fish/functions/o2d.fish
   fish/functions/o2h.fish
   fish/functions/o2o.fish
   git/config
   kanshi/config
   mako/config
   nvim/ftplugin/c.lua
   nvim/ftplugin/cpp.lua
   nvim/ftplugin/fish.lua
   nvim/ftplugin/haskell.lua
   nvim/ftplugin/html.lua
   nvim/ftplugin/lua.lua
   nvim/ftplugin/markdown.lua
   nvim/ftplugin/rust.lua
   nvim/ftplugin/sbt.lua
   nvim/ftplugin/scala.lua
   nvim/ftplugin/sh.lua
   nvim/lua/grs/config/autocmds.lua
   nvim/lua/grs/config/colors.lua
   nvim/lua/grs/config/globals.lua
   nvim/lua/grs/config/icons.lua
   nvim/lua/grs/config/keymaps.lua
   nvim/lua/grs/config/mason.lua
   nvim/lua/grs/config/options.lua
   nvim/lua/grs/config/treesitter.lua
   nvim/lua/grs/plugins/util/dap.lua
   nvim/lua/grs/plugins/util/lspconfig.lua
   nvim/lua/grs/plugins/util/mason.lua
   nvim/lua/grs/plugins/util/nullLs.lua
   nvim/lua/grs/plugins/config.lua
   nvim/lua/grs/plugins/cmp.lua
   nvim/lua/grs/plugins/early.lua
   nvim/lua/grs/plugins/lazy.lua
   nvim/lua/grs/plugins/lspconfig.lua
   nvim/lua/grs/plugins/telescope.lua
   nvim/lua/grs/plugins/textedit.lua
   nvim/lua/grs/plugins/treesitter.lua
   nvim/lua/grs/plugins/mason.lua
   nvim/lua/grs/plugins/whichkey.lua
   nvim/lua/grs/util.lua
   nvim/init.lua
   sway/config
   sway/config_bg_color
   sway/config_bg_picture
   systemd/user/kanshi.service
   systemd/user/mako.service
   systemd/user/sway-session.target
   waybar/config
   waybar/style.css
   wofi/config
'

SSH_CONFIGS='
   config
'

RM_ITEMS="
   $HOME/.gitconfig
   $HOME/.sway
   $HOME/.mako
   $XDG_CONFIG_HOME/sway/config_output_laptop
   $XDG_CONFIG_HOME/sway/config_output_laptop_dp
   $XDG_CONFIG_HOME/sway/config_output_laptop_hdmi
"

### Argument parsing, last -c option wins, default is to install

check=install
while getopts c: opt 2>&1
do
   case "$opt" in
      c)
         check="$OPTARG"
         ;;
      \?)
         printf '\n%s\n' "$usage"
         return 1
         ;;
   esac
done
shift $((OPTIND - 1))

if [ $# -gt 0 ]
then
   printf '\nError: dfInstall takes no arguments, just an option\n'
   printf '\n%s\n' "$usage"
   return 1
fi

if [ "$check" != install ] && \
   [ "$check" != repo ] && \
   [ "$check" != target ]
then
   printf '\n%s\n' "$usage"
   return 1
fi

### Functions

## Function to removes files
remove_item () {
   item="$1"
   if [ -e "$item" ]
   then
      case "$check" in
         install)
            # Remove the item
            rm -rf "$item"
            test -e "$item" && printf "\\nWarning: Failed to remove item '%s'\\n" "$item"
            ;;
         target)
            # Item needs removing
            printf "\\nTarget '%s' needs removing.\\n" "$item"
            ;;
      esac
   fi
}

## Function to install files
install_file () {
   install_dir="$1"
   file_path="$2"
   src_dir="$3"
   file_perm="$4"
   src="$src_dir/$file_path"
   src_abs="$DOTFILE_GIT_REPO${src#.}"
   trgt="$install_dir/$file_path"
   trgt_dir="${trgt%/*}"

   case "$check" in
      install)
         # Make sure target directory exists
         test -d "$trgt_dir" || mkdir -p "$trgt_dir" || \
            printf "\\nWarning: Failed to create '%s' directory\\n" "$trgt_dir"

         # Install the file
         if cp "$src" "$trgt" >/dev/null 2>&1
         then
            chmod --quiet "$file_perm" "$trgt" || \
               printf "\\nWarning: Failed to set permissions on '%s' to '%s'\\n" "$trgt" "$file_perm"
         else
            printf "\\nWarning: Failed to install '%s'\\n" "$trgt"
         fi
         ;;
      repo)
         # Compare config (this script) with dotfile repo working directory
         test -e "$src" || printf "\\n'%s' not in git working directory.\\n" "$src_abs"
         ;;
      target)
         # Compare config (this script) with install target
         if [ ! -e "$src" ] && [ ! -e "$trgt" ]
         then
            printf "\\nBoth Target: '%s'\n and Source: '%s' don't exist.\\n" \
            "$trgt" "$src_abs"
         elif [ ! -e "$trgt" ]
         then
            printf "\\nTarget: '%s' doesn't exist.\\n" "$trgt"
         elif [ ! -e "$src" ]
         then
            printf "\\nSource: '%s' doesn't exist.\\n" "$src_abs"
         else
            diff "$src" "$trgt" >/dev/null 2>&1 || \
               printf "\\nTarget: '%s' differs from\\nSource: '%s'.\\n" \
               "$trgt" "$src_abs"
         fi
         ;;
   esac
}

### Install or check dotfiles

## Install home directory files
for home_file in $HOME_FILES
do
   install_file "$HOME" "$home_file" ./home 0644
done

## Install  ~/bin  scripts
for bin_file in $BIN_SCRIPTS
do
   install_file "$HOME/bin" "$bin_file" ./home/bin 0755
done
chmod 0755 "$HOME/bin"

## Install configuration files

# Install Bloop Configs for Scala
for conf_file in $BLOOP_FILES
do
   install_file "$HOME/.bloop" "$conf_file" ./home/bloop 0600
done
chmod 0755 "$HOME/.bloop"

# Install Cabal Configs for Haskell
for conf_file in $CABAL_CONFIGS
do
   install_file "$HOME/.cabal" "$conf_file" ./home/cabal 0644
done
chmod 0755 "$HOME/.cabal"

# Install $XDG_CONFIG_HOME files
for conf_file in $CONFIG_FILES
do
   install_file "$XDG_CONFIG_HOME" "$conf_file" ./config 0644
done
chmod 0700 "$HOME/.config"

# Install SSH Configs
for conf_file in $SSH_CONFIGS
do
   install_file "$HOME/.ssh" "$conf_file" ./home/ssh 0600
done
chmod 0700 "$HOME/.ssh"

### Some final tweaks, checks & cleanup

case "$check" in
   install)
      # Remove no longer needed files and directories
      for item in $RM_ITEMS
      do
          remove_item "$item"
      done

      # Create needed missing directories
      test -d "$HOME/catch" || mkdir "$HOME/catch" || {
         printf "\\nWarning: Failed to create '~/catch'.\\n"
      }
      test -d "$HOME/.local/bin" || mkdir -p "$HOME/.local/bin" || {
         printf "\\nWarning: Failed to create '~/.local/bin'.\\n"
      }
      test -d "$HOME/.cabal/bin" || mkdir -p "$HOME/.cabal/bin" || {
         printf "\\nWarning: Failed to create '~/.cabal/bin'.\\n"
      }

      # Keep alacritty from rereading its config file mid-copy
      mv "$XDG_CONFIG_HOME"/alacritty/alacritty_arch.yml \
         "$XDG_CONFIG_HOME"/alacritty/alacritty.yml

      cp "$XDG_CONFIG_HOME"/alacritty/alacritty.yml \
         "$XDG_CONFIG_HOME"/alacritty/alacritty_arch.yml

      ## Setup sway output configuration

      # The background picture I personally use is from
      # 'https://www.facebook.com/alittleofmeinyou/photos/325964185818238'
      picture="$HOME/Pictures/Desktops/SwayBG.jpg"
      bg_link="$XDG_CONFIG_HOME"/sway/config_bg 
      if test -f "$picture"
      then
         bg="$XDG_CONFIG_HOME"/sway/config_bg_picture
      else
         bg="$XDG_CONFIG_HOME"/sway/config_bg_color
      fi
      test -L "$bg_link" && rm "$bg_link"
      ln -s "$bg" "$bg_link"
      ;;
   repo)
      # Get some git status info on repo
      printf '\nGit Status:\n'
      git status -s
      ;;
   target)
      # Check for missing directories
      test -d "$HOME/catch" || printf '\n%s does not exist.\n' "$HOME/catch/"
      test -d "$HOME/.local/bin" || printf '\n%s does not exist.\n' "$HOME/.local/bin/"
      test -d "$HOME/.cabal/bin" || printf '\n%s does not exist.\n' "$HOME/.cabal/bin/"

      # Check for no longer needed target files and directories
      for item in $RM_ITEMS
      do
         test -e "$item" && {
            if [ -h "$item" ]; then
               printf "\\nLink '%s' needs to be removed.\\n" "$item"
            elif [ -f "$item" ]; then
               printf "\\nFile '%s' needs to be removed.\\n" "$item"
            elif [ -d "$item" ]; then
               printf "\\nDir '%s' needs to be removed.\\n" "$item"
            else
               printf "\\nItem '%s' needs to be removed.\\n" "$item"
            fi
         }
      done
      ;;
esac
