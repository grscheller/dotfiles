#!/bin/sh
#
#  Installs my Fish, Sway. Neovim, Git, SSH and Bash based
#  software development environment into my $HOME directory.
#
#  Usage: ./dfInstall
#
#  Note: Assuming $XDG_CONFIG_HOME & $HOME do not
#        contain whitespace.  Due to $RM_ITEMS.
#
#  Note: Found no good way to bulletproof automatically
#        regenerating ~/.config/fish/fish_variables, especially
#        when there are lots of fish configuration changes.
#
#        Usually just using my "re" abbreviation is
#        enough, but sometimes a bigger "kick" is needed,
#        like doing
#
#          $ rm .config/fish/fish_variables; re
#
#        This might be a bit too heavy handed if one likes
#        to manually configure Fish from the command line.
#

### Setup
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:=$HOME/.config}"
DOTFILE_GIT_REPO="${DOTFILE_GIT_REPO:=$HOME/devel/dotfiles}"
umask 0022

cd "$DOTFILE_GIT_REPO" || {
   printf '\n'
   printf "Error: Failed to cd into '%s'\\n" "$DOTFILE_GIT_REPO" >&2
   return 1
}

HOME_FILES='
   .bash_profile
   .bashrc
   .inputrc
'

# Do not install dotfilesInstall, systemfilesInstall, grsSwap
BIN_SCRIPTS='
   bsPacker
   buArch
   chkcolor
   digpath
   monitor
   pathtrim
   rt
   spin
   viewJarManifest
'

BLOOP_FILES='
   bloop.json
'

CABAL_CONFIGS='
   config
'

CONFIG_FILES='
   alacritty/alacritty_arch.yml
   fish/completions/alacritty.fish
   fish/conf.d/abbrs.fish
   fish/conf.d/colors.fish
   fish/config.fish
   fish/functions/archJDK.fish
   fish/functions/ax.fish
   fish/functions/digpath.fish
   fish/functions/disable_touch_pad.fish
   fish/functions/enable_touch_pad.fish
   fish/functions/ev.fish
   fish/functions/fdot.fish
   fish/functions/ff.fish
   fish/functions/fields.fish
   fish/functions/fishterm.fish
   fish/functions/fm.fish
   fish/functions/fish_greeting.fish
   fish/functions/fish_mode_prompt.fish
   fish/functions/fish_prompt.fish
   fish/functions/fish_title.fish
   fish/functions/la.fish
   fish/functions/lbry.fish
   fish/functions/ldir.fish
   fish/functions/ldot.fish
   fish/functions/lf.fish
   fish/functions/lh.fish
   fish/functions/ll.fish
   fish/functions/nsort.fish
   fish/functions/pathtrim.fish
   fish/functions/rc.fish
   fish/functions/ud.fish
   fish/functions/unguard_universals.fish
   fish/functions/Wget.fish
   fish/functions/WgetM.fish
   fish/functions/b2b.fish
   fish/functions/b2d.fish
   fish/functions/b2h.fish
   fish/functions/b2o.fish
   fish/functions/d2b.fish
   fish/functions/d2d.fish
   fish/functions/d2h.fish
   fish/functions/d2o.fish
   fish/functions/h2b.fish
   fish/functions/h2d.fish
   fish/functions/h2h.fish
   fish/functions/h2o.fish
   fish/functions/o2b.fish
   fish/functions/o2d.fish
   fish/functions/o2h.fish
   fish/functions/o2o.fish
   git/config
   nvim/init.lua
   nvim/lua/grs/config/autocmds.lua
   nvim/lua/grs/config/keymaps.lua
   nvim/lua/grs/config/lazy.lua
   nvim/lua/grs/config/mason.lua
   nvim/lua/grs/config/options.lua
   nvim/lua/grs/config/settings.lua
   nvim/lua/grs/devel/util/dap.lua
   nvim/lua/grs/devel/util/lspconf.lua
   nvim/lua/grs/devel/util/mason.lua
   nvim/lua/grs/devel/util/nullLs.lua
   nvim/lua/grs/devel/completions.lua
   nvim/lua/grs/devel/init.lua
   nvim/lua/grs/devel/mason.lua
   nvim/lua/grs/devel/neoconf.lua
   nvim/lua/grs/devel/telescope.lua
   nvim/lua/grs/devel/tooling.lua
   nvim/lua/grs/devel/treesitter.lua
   nvim/lua/grs/lib/functional.lua
   nvim/lua/grs/lib/Vim.lua
   nvim/lua/grs/plugin/config.lua
   nvim/lua/grs/plugin/textedit.lua
   nvim/lua/grs/plugin/theming.lua
   nvim/lua/grs/plugin/whichkey.lua
   sway/config
   waybar/config
   waybar/style.css
   wofi/config
'

SSH_CONFIGS='
   config
'

RM_ITEMS="
   ${HOME}/.gitconfig
   ${XDG_CONFIG_HOME}/fish/functions/bases/
   ${XDG_CONFIG_HOME}/nvim/.neoconf.json
   ${XDG_CONFIG_HOME}/nvim/.stylua.toml
   ${XDG_CONFIG_HOME}/nvim/neoconf.json
   ${XDG_CONFIG_HOME}/nvim/plugin/
   ${XDG_CONFIG_HOME}/nvim/lua/config/
   ${XDG_CONFIG_HOME}/nvim/lua/plugins/
   ${XDG_CONFIG_HOME}/nvim/lua/lazyvim/
   ${XDG_CONFIG_HOME}/nvim/lua/grs/config/keybindings.lua
   ${XDG_CONFIG_HOME}/nvim/lua/grs/plugin/after/
   ${XDG_CONFIG_HOME}/nvim/lua/grs/textedit/
"

### Functions

## Function to removes files
remove_item () {
   rm_item="$1"

   test ! -e "$rm_item" ||
      rm -r "$rm_item" 2>&- || {
         printf '\n'
         printf "Error: Failed to remove item '%s'\\n" "$rm_item" >&2
         return 1
      }
   return 0
}

## Function to install files
install_file () {
   install_dir="$1"
   file_path="$2"
   src_dir="$3"
   file_perm="$4"
   src="$src_dir/$file_path"
   trgt="$install_dir/$file_path"
   trgt_dir="${trgt%/*}"

   test -d "$trgt_dir" || mkdir -p "$trgt_dir" || {
      printf '\n'
      printf "Error: Failed to create '%s' directory,\\n" "$trgt_dir" >&2
      printf "       punting on installing '%s' config file\\n" "$trgt" >&2
      return 1
   }

   # Install the file
   if cp "$src" "$trgt"
   then
      chmod "$file_perm" "$trgt" || {
         printf '\n'
         printf "Error: Failed to set permissions on '%s' to '%s'\\n" "$trgt" "$file_perm" >&2
         return 1
      }
   else
      printf "Error: Failed to install '%s'\\n" "$trgt" >&2
      return 1
   fi

   return 0
}

### Install files

## Install home directory files
for home_file in $HOME_FILES
do
   install_file "$HOME" "$home_file" ./home 0644 || exit 1
done

## Install  ~/bin  scripts
for bin_file in $BIN_SCRIPTS
do
   install_file "$HOME/bin" "$bin_file" ./home/bin 0755 || exit 1
done
chmod 0755 "$HOME/bin"

## Install configuration files

# Install SSH Configs
for conf_file in $BLOOP_FILES
do
   install_file "$HOME/.bloop" "$conf_file" ./home/bloop 0600 || exit 1
done
chmod 0755 "$HOME/.bloop"

# Install Cabal Configs for Haskell
for conf_file in $CABAL_CONFIGS
do
   install_file "$HOME/.cabal" "$conf_file" ./home/cabal 0644 || exit 1
done
chmod 0755 "$HOME/.cabal"

# Install $XDG_CONFIG_HOME files
for conf_file in $CONFIG_FILES
do
   install_file "$XDG_CONFIG_HOME" "$conf_file" ./home/config 0644 || exit 1
done

# Keep alacritty from rereading its config file mid-copy
mv "${XDG_CONFIG_HOME}"/alacritty/alacritty_arch.yml \
   "${XDG_CONFIG_HOME}"/alacritty/alacritty.yml

# Swap in a Sway background image if present, the picture I personally use
# is from 'https://www.facebook.com/alittleofmeinyou/photos/325964185818238'
Picture="${HOME}/Pictures/Desktops/SwayBG.jpg"
if [ -f "$Picture" ]
then
    mv "${XDG_CONFIG_HOME}"/sway/config "${XDG_CONFIG_HOME}"/sway/config_orig
    sed -e "s|^\( *output \* bg \).* solid_color$|\1$Picture fill|" \
        "${XDG_CONFIG_HOME}"/sway/config_orig > \
        "${XDG_CONFIG_HOME}"/sway/config
    rm -f "${XDG_CONFIG_HOME}"/sway/config_orig
fi

# Install SSH Configs
for conf_file in $SSH_CONFIGS
do
   install_file "$HOME/.ssh" "$conf_file" ./home/ssh 0600 || exit 1
done
chmod 0700 "$HOME/.ssh"

### Some final tweaks and clean up

## Create ~/catch, for scp and downloads
test -d "$HOME/catch" || mkdir "$HOME/catch" || {
    printf '\n'
    printf "Warning: Failed to create '~/catch'.\\n" >&2
}
test -d "$HOME/.local/bin" || mkdir "$HOME/.local/bin" || {
    printf '\n'
    printf "Warning: Failed to create '~/.local/bin'.\\n" >&2
}
test -d "$HOME/.cabal/bin" || mkdir "$HOME/.cabal/bin" || {
    printf '\n'
    printf "Warning: Failed to create '~/.cabal/bin'.\\n" >&2
}

## Remove no longer needed files and directories.
for item in $RM_ITEMS
do
    remove_item "$item" || exit 1
done

## Warning message
printf '\nMake sure fish & nvim environments get properly updated.\n'
