#!/usr/bin/fish
#
#  Toggle between a symlink, from ~/.config/nvim/lua/grs to the dotfiles
#  repo's config/nvim/lua/grs directory, and the installed version of the
#  nvim configs.
#
#  Sumneko_lua LSP server,when editing the dotfiles repo's Neovim configs
#  themselves, will conflate Lua libraries of the nvim configs being edited
#  with those of the configs of the nvim currently being used to do the
#  editing.  This is probably due to using the nvim runtimepath to get access
#  to plugin Lua source files.  To overcome this, this script uses the repo's
#  own nvim itself to do the editing.
#
#  This way you toggle back and forth between editing with the nvim version
#  you are currently editing and a potentially more stable older version.
#  When using the symlink, one should edit thru the symlink, when using the
#  installed nvim, edit the repo itself.
#
set -q XDG_CONFIG_HOME; or set -lx XDG_CONFIG_HOME ~/.config
set -q DOTFILE_GIT_REPO; or set -gx DOTFILE_GIT_REPO ~/devel/dotfiles

if test -d ~/.config/nvim_lua_grs_backup
   rm $XDG_CONFIG_HOME/nvim/lua/grs
   mv $XDG_CONFIG_HOME/nvim_lua_grs_backup $XDG_CONFIG_HOME/nvim/lua/grs
   printf '\nEdit nvim config files directly in %s.' $DOTFILE_GIT_REPO
   printf '\nIssue git commands from dotfiles repo, %s.' $DOTFILE_GIT_REPO
   printf '\nThe dotfileInstall script will now work.\n'
   cd $DOTFILE_GIT_REPO
else
   mv ~/.config/nvim/lua/grs ~/.config/nvim_lua_grs_backup
   ln -s $DOTFILE_GIT_REPO/config/nvim/lua/grs $XDG_CONFIG_HOME/nvim/lua/grs
   printf '\nEdit nvim config files thru %s/nvim/lua/grs.' $XDG_CONFIG_HOME
   printf '\nStill issue git commands from %s.' $DOTFILE_GIT_REPO
   printf '\nThe dotfileInstall script will fail!!!\n'
   cd $XDG_CONFIG_HOME/nvim
end
