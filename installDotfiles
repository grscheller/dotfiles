#!/bin/sh
#
#  Installs various Shell environment .dotfiles,
#  as well as other config files, into the $HOME directory.
# 
#  Usage: ./installDotfiles
# 
#         run from the cloned dotfiles directory
#
# shellcheck shell=sh

### Setup

HOME_FILES='
   .bashrc
   .dashrc
   .envrc
   .bash_functions_rc
   .inputrc
   .kshrc
   .profile
   .shrc
'

RM_FILES='
   .bash_profile
   .local/bin/digpath.bash
   .local/bin/digpath.sh
'

CONFIG_FILES='
   alacritty/alacritty.yml
   fish/completions/alacritty.fish
   fish/config.fish
   fish/functions/digpath.fish
   fish/functions/ff.fish
   fish/functions/fish_greeting.fish
   fish/functions/fish_mode_prompt.fish
   fish/functions/fish_prompt.fish
   fish/functions/pathtrim.fish
   fish/functions/tm.fish
   fish/functions/ud.fish
   nvim/init.vim
'

SSH_CONFIGS='
   config
'

LOCAL_BIN_SCRIPTS='
   digpath
   pathtrim
'

BIN_SCRIPTS='
   bsPlug
   buArch
   monitor
   rt
   spin
   viewJarManifest
'

## Function to back up and optionally removes files
backup_file () {

   buFile="$1"
   Remove="$2"

   diff "$buFile" "${buFile}.old" >/dev/null 2>&1 ||
       [ ! -f "$buFile" ] ||
       cp "$buFile" "${buFile}.old" || {
          printf '\n'
          printf "Error: Failed to make backup copy of '%s'" "$buFile" >&2
          if [ -z "$Remove" ]; then
              printf '\n'
          else
              printf ',\n       which was slated for removal.\n' >&2
          fi
          return 1
       }

   [ -z "$Remove" ] ||
      [ ! -f "$buFile" ] ||
         rm "$buFile" 2>&- || {
            printf '\n'
            printf "Error: Failed to remove file '%s'\\n" "$buFile" >&2
            return 1
         }

   return 0
}

## Function to installs config files
install_config_file () {

   conf_dir="$1"
   file_path="$2"
   src_dir="$3"
   src="$src_dir/$file_path"
   trgt="$conf_dir/$file_path"
   trgt_dir="${trgt%/*}"

   [ -d "$trgt_dir" ] || mkdir -p "$trgt_dir" || {
      printf '\n'
      printf "Error: Failed to create '%s' directory,\\n" "$trgt_dir" >&2
      printf "       punting on installing '%s' config file\\n" "$trgt" >&2
      return 1
   }

   # Install file
   if cp "$src" "$trgt"
   then
      chmod u=rw,g=,o= "$trgt" || {
          printf '\n'
          printf "Error: Failed to set permissions on '%s' to 600\\n" "$trgt" >&2
          return 1
      }
   else
      printf "Error: Failed to install '%s'\\n" "$trgt" >&2
      return 1
   fi

   return 0
}


### Install files

## Install home directory dot-files - backup existing files
for File in $HOME_FILES
do
    backup_file  ~/"${File}" || exit 1

    # Strip out syntastic info and install into $HOME
    cp "${File}" ~ || {
       printf "Error: Failed while installing '~/%s'\\n" "${File}" >&2
       exit 1
    }
    # Set permissions
    chmod u=rw,g=r,o= ~/"${File}" || {
       printf 'Warning: Failed to set permissions' >&2
       printf ' on ~/%s to 640\n' ".${File%.*}"  >&2
    }
done

## Old ksh versions don't alias local
sed 's/ local / typeset /' ~/.bash_functions_rc > ~/.ksh_functions_rc ||
    printf 'Warning: Failed to create ~/.ksh_functions_rc\n'
chmod u=rw,g=r,o= ~/.ksh_functions_rc ||
    printf 'Warning: Failed to set permissions on ~/.ksh_functions_rc\n'

## Install local scripts

# Create ~/.local/bin directory if necessary
[ -d ~/.local/bin ] || mkdir -p ~/.local/bin || {
   printf '\n'
   printf 'Error: Failed to create ~/.local/bin\n' >&2
   exit 1
}
chmod u=rwx,g=rx,o= ~/.local/bin || {
   printf '\n'
   printf "Warning: Failed to set permissions on '~/.local/bin' to 750\\n" >&2
}

# Create ~/bin directory if necessary
[ -d ~/bin ] || mkdir ~/bin || {
   printf '\n'
   printf 'Error: Failed to create ~/bin\n' >&2
   exit 1
}
chmod u=rwx,g=rx,o= ~/bin || {
   printf '\n'
   printf "Warning: Failed to set permissions on '~/bin' to 750\\n" >&2
}

# Install .local/bin scripts
for File in $LOCAL_BIN_SCRIPTS
do
    cp bin/"$File" ~/.local/bin/ ||
       printf 'Warning: Failed to install ~/.local/bin/%s\n' "$File" >&2
    chmod u=rwx,g=rx,o= ~/.local/bin/"${File}" || {
       printf 'Warning: Failed to set permissions' >&2
       printf ' on ~/.local/bin/%s to 750\n' "${File}" >&2
    }
done

# Install  ~/bin  scripts
for File in $BIN_SCRIPTS
do
    cp bin/"$File" ~/bin/ ||
       printf 'Warning: Failed to install ~/bin/%s\n' "$File" >&2
    chmod u=rwx,g=rx,o= ~/bin/"${File}" || {
       printf 'Warning: Failed to set permissions' >&2
       printf ' on ~/bin/%s to 750\n' "${File}" >&2
    }
done

## Install configuration files

# Install ~/.config files
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:=$HOME/.config}"

for conf_file in $CONFIG_FILES
do
    install_config_file "$XDG_CONFIG_HOME" "$conf_file" ./config
done

# Install SSH Configs

for conf_file in $SSH_CONFIGS
do
    install_config_file ~/.ssh "$conf_file" ./ssh
done


### Some final clean up

## Create ~/catch for the toSystem () family of shell functions
[ -d ~/catch ] || mkdir ~/catch || {
   printf '\n'
   printf "Warning: Failed to create '~/catch', do so manually\\n" >&2
}

## Backup then remove certain files
for File in $RM_FILES
do
    backup_file  ~/"$File" Remove || exit 1
done

