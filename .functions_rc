##
#  ~/.functions_rc
#
#  Function definitions used by
#  ~/.bashrc
#
# shellcheck shell=bash

## Command line utility functions

# Jump up multiple directories
function ud
{
   local upDir=..
   local nDirs="$1"
   if [[ $nDirs == @([1-9])*([0-9]) ]]
   then
       until (( nDirs-- <= 1 ))
       do
           upDir=../$upDir
       done
   fi
   cd $upDir
}

# Similar to the DOS path command
function path
{
   if (( $# == 0 ))
   then
       PathWord="$PATH"
   else
       PathWord="$1"
   fi

   ( IFS=':'
     printf '%s\n' $PathWord )
}

# Drill down through $PATH to look for files or directories.
# Like the ksh builtin whence, except it does not stop
# after finding the first instance.  Handles spaces in both
# filenames and directories on $PATH.  Also, shell patterns
# are supported.
#
# Usage: digpath [-q] [-h] file1 file2 ...
#        digpath [-q] [-h] shell_pattern
#
# Options: -q: quiet
#          -h: help
#
# Returns: 0 if a file was found on $PATH
#          1 if no file found on $PATH
#          2 if help option or an invalid option given
#
function digpath
{ ( function usage_digpath
    {
        printf 'Usage: digpath [-q] file1 file2 ...\n' >&2
        printf '       digpath [-q] shell_pattern\n'   >&2
        printf '       digpath [-h]\n'                 >&2
    }

    local OPTIND opt
    local quiet_flag=
    while getopts :hq opt
    do
      case $opt in
        q) quiet_flag=1
           ;;
        h) usage_digpath
           return 2
           ;;
        ?) printf 'Error: invalid option %s\n' "$OPTARG"  >&2
           usage_digpath
           return 2
           ;;
      esac
    done

    IFS=':'

    local ii=0  # for array index
    local File match
    local FileList=()

    for File in "$@"
    do
       [[ -z "$File" ]] && continue
       for Dir in $PATH
       do
          [[ ! -d "$Dir" ]] && continue
          if [[ -d "$Dir" ]]
          then
              for match in $Dir/$File
              do
                  [[ -f $match ]] && FileList[((ii++))]="$match"
              done
          fi
       done
    done

    [[ -z $quiet_flag ]] && printf '%s\n' "${FileList[@]}"

    if ((${#FileList[@]} > 0))
    then
        return 0
    else
        return 1
    fi )
}

# Archive eXtractor: usage: ax <file>
function ax
{
   if [[ -f $1 ]]
   then
       case $1 in
         *.tar)     tar -xvf "$1"               ;;
         *.tar.bz2) tar -xjvf "$1"              ;;
         *.tbz2)    tar -xjvf "$1"              ;;
         *.tar.gz)  tar -xzvf "$1"              ;;
         *.tgz)     tar -xzvf "$1"              ;;
         *.tar.Z)   tar -xZvf "$1"              ;;
         *.gz)      gunzip "$1"                 ;;
         *.bz2)     bunzip2 "$1"                ;;
         *.zip)     unzip "$1"                  ;;
         *.Z)       uncompress "$1"             ;;
         *.rar)     unrar x "$1"                ;;
         *.tar.xz)  xz -dc "$1" | tar -xvf -    ;;
         *.tar.7z)  7za x -so "$1" | tar -xvf - ;;
         *.7z)      7z x "$1"                   ;;
         *.cpio)    cpio -idv < "$1"            ;;
         *) printf 'ax: error: "%s" unknown file type' "$1"  >&2 ;;
       esac
   else
       if [[ -n $1 ]]
       then
           printf 'ax: error: "%s" is not a file' "$1" >&2
       else
           printf 'ax: error: No file argument given' >&2
       fi
   fi
}

# Convert between various bases (use capital A-F for hex-digits)
#
#   Examples: h2d "AA + BB" -> 357
#             h2h "AA + BB" -> 165
#             d2h 357       -> 165
#
h2h () { printf 'ibase=16\nobase=10\n%s\n'   "$*" | /usr/bin/bc; }
h2d () { printf 'ibase=16\nobase=A\n%s\n'    "$*" | /usr/bin/bc; }
h2o () { printf 'ibase=16\nobase=8\n%s\n'    "$*" | /usr/bin/bc; }
h2b () { printf 'ibase=16\nobase=2\n%s\n'    "$*" | /usr/bin/bc; }
d2h () { printf 'ibase=10\nobase=16\n%s\n'   "$*" | /usr/bin/bc; }
d2d () { printf 'ibase=10\nobase=10\n%s\n'   "$*" | /usr/bin/bc; }
d2o () { printf 'ibase=10\nobase=8\n%s\n'    "$*" | /usr/bin/bc; }
d2b () { printf 'ibase=10\nobase=2\n%s\n'    "$*" | /usr/bin/bc; }
o2h () { printf 'ibase=8\nobase=20\n%s\n'    "$*" | /usr/bin/bc; }
o2d () { printf 'ibase=8\nobase=12\n%s\n'    "$*" | /usr/bin/bc; }
o2o () { printf 'ibase=8\nobase=10\n%s\n'    "$*" | /usr/bin/bc; }
o2b () { printf 'ibase=8\nobase=2\n%s\n'     "$*" | /usr/bin/bc; }
b2h () { printf 'ibase=2\nobase=10000\n%s\n' "$*" | /usr/bin/bc; }
b2d () { printf 'ibase=2\nobase=1010\n%s\n'  "$*" | /usr/bin/bc; }
b2o () { printf 'ibase=2\nobase=1000\n%s\n'  "$*" | /usr/bin/bc; }
b2b () { printf 'ibase=2\nobase=10\n%s\n'    "$*" | /usr/bin/bc; }

## Launch Desktop GUI Apps from command line

# Open Desktop file manager
function fm
{
   local DiR="$1"
   [[ -n $DiR ]] || DiR="$PWD"
   xdg-open "$DiR"
}

# Terminal which inherits environment of parent shell
function tm
{
   if [[ -x /usr/bin/alacritty ]]; then
       ( /usr/bin/alacritty & )
   elif [[ -x /usr/bin/gnome-terminal ]]; then
       ( /usr/bin/gnome-terminal >&- 2>&- )
   elif [[ -x /usr/bin/urxvt ]]; then
       ( /usr/bin/urxvt >/dev/null 2>&1 & )
   elif [[ -x /usr/bin/xterm ]]; then
       ( /usr/bin/xterm >/dev/null 2>&1 & )
   else
       printf "tm: error: terminal emulator not found\n" >&2
   fi
}

## GUI-land apps

# PDF Reader
ev () ( /usr/bin/evince "$@" >/dev/null 2>&1 & )

# LBRY AppImage
function lbry
{
   local LBRY_Dir=~/opt/AppImages
   # shellcheck disable=SC2206
   local LBRY_App=(${LBRY_Dir}/LBRY_*.AppImage)

   (( ${#LBRY_App[@]} > 1  )) && {
       printf "  Error: Multiple LBRY apps found in :\n"
       printf "\t%s\n" "${LBRY_App[@]}"
       return 1
   }

   [[ ${LBRY_App[0]} == ${LBRY_Dir}/LBRY_/*.AppImage ]] && {
       printf '  Error: LBRY app not found in %s\n' "$LBRY_Dir"
       return 1
   }

   ( ${LBRY_App[0]} >/dev/null 2>&1 & )
}

# Firefox Browser
function ff
{
   if digpath -q firefox
   then
       ( firefox "$@" >&- 2>&- & )
   else
       printf 'firefox not found\n' >&2
   fi
}

# LibreOffice
lo () ( /usr/bin/libreoffice & )

# LibreOffice writer
low () ( /usr/bin/libreoffice --writer "$@" & )

## Software development related functions

# Setup JDK on Arch
function archJDK
{
   local version="$1"
   local jdir
   local jver

   if [[ -z $version ]]
   then
       printf "Available Java Versions: "
       for jdir in /usr/lib/jvm/java-*-openjdk
       do
           jver=${jdir%-*}
           jver=${jver#*-}
           printf '%s ' "$jver"
       done
       printf '\n'
       return
   fi

   if [[ ! $version == @([1-9])*([0-9]) ]]
   then
       printf "Malformed JDK version number: \"%s\"\n" "$version"
       return
   fi

   if [[ -d /usr/lib/jvm/java-${version}-openjdk ]]
   then
       export JAVA_HOME=/usr/lib/jvm/java-${version}-openjdk
       if [[ $PATH == /usr/lib/jvm/java-@([1-9])*([0-9])-openjdk/bin:* ]]
       then
           PATH=${PATH#[^:]*:}
       fi
       PATH=$JAVA_HOME/bin:$PATH
   else
       printf "No JDK found for Java \"%s\" in the\n" "$version"
       printf "standard location for Arch: /usr/lib/jvm/\n"
   fi
}

# Configure Haskell

# Suppress pedantic warnings, and whatever else may get in the
# way of quickly syntax-checking and evaluating an expression.
ghci() { command ghci -v0 -Wno-all "$@"; }

if digpath -q stack
then
    # Bash completion for stack (Haskell)
    eval "$(stack --bash-completion-script stack)"
fi
