#!/bin/sh
#
# nvimInstall: Installs Neovim configuration files.
#
# shellcheck shell=dash
#

scriptName=nvInstall
envName=nvim-env

gitRepo="${DOTFILES_GIT_REPO:=$HOME/devel/dotfiles}"
envPath="$gitRepo/$envName"

cd "$envPath" 2>/dev/null || {
   printf '\n%s: Error - failed to cd into "%s"\n\n' "$scriptName" "$gitRepo"
   return 1
}

# Parse cmdline arguments and source functions, if not done already
. ../bin/source_setup.sh

dot_config_files='
   after/ftplugin/c.lua
   after/ftplugin/cpp.lua
   after/ftplugin/csv.lua
   after/ftplugin/fish.lua
   after/ftplugin/go.lua
   after/ftplugin/haskell.lua
   after/ftplugin/help.lua
   after/ftplugin/html.lua
   after/ftplugin/lua.lua
   after/ftplugin/markdown.lua
   after/ftplugin/ocaml.lua
   after/ftplugin/rust.lua
   after/ftplugin/sbt.lua
   after/ftplugin/scala.lua
   after/ftplugin/sh.lua
   after/ftplugin/text.lua
   after/ftplugin/tsv.lua
   after/ftplugin/zig.lua
   lua/grs/config/autocmds/text.lua
   lua/grs/config/autocmds/lsp.lua
   lua/grs/config/keymaps/early.lua
   lua/grs/config/keymaps/late.lua
   lua/grs/config/lsp.lua
   lua/grs/config/globals.lua
   lua/grs/config/options.lua
   lua/grs/lib/functional.lua
   lua/grs/lib/scroll.lua
   lua/grs/lib/text.lua
   lua/grs/plugins/coding/init.lua
   lua/grs/plugins/coding/format.lua
   lua/grs/plugins/coding/gitsigns.lua
   lua/grs/plugins/coding/lint.lua
   lua/grs/plugins/coding/textedit.lua
   lua/grs/plugins/core/init.lua
   lua/grs/plugins/core/appearance.lua
   lua/grs/plugins/core/common.lua
   lua/grs/plugins/core/early.lua
   lua/grs/plugins/core/telescope.lua
   lua/grs/plugins/core/treesitter.lua
   lua/grs/plugins/core/whichkey.lua
   lua/grs/plugins/ide/lsp/lspconfig/init.lua
   lua/grs/plugins/ide/lsp/lspconfig/indirectly.lua
   lua/grs/plugins/ide/lsp/lspconfig/manually.lua
   lua/grs/plugins/ide/lsp/nvimlsp/init.lua
   lua/grs/plugins/ide/lsp/nvimlsp/rust.lua
   lua/grs/plugins/ide/lsp/nvimlsp/scala.lua
   lua/grs/plugins/ide/lsp/init.lua
   lua/grs/plugins/ide/init.lua
   lua/grs/plugins/ide/cmp.lua
   lua/grs/plugins/ide/dap.lua
   lua/grs/plugins/ide/fidgit.lua
   spell/en.utf-8.add
   init.lua
'

toml_files='
   stylua.toml
'

remove_items="
   $XDG_CONFIG_HOME/nvim/lua/grs/config/lua/grs/config/autocmds.lua
   $XDG_CONFIG_HOME/nvim/lua/grs/config/lua/grs/config/autocmds_text.lua
   $XDG_CONFIG_HOME/nvim/lua/grs/config/lua/grs/config/autocmds_lsp.lua
   $XDG_CONFIG_HOME/nvim/lua/grs/config/keymaps_early.lua
   $XDG_CONFIG_HOME/nvim/lua/grs/config/keymaps.lua
"

dirs_to_create=""

## Preinstall checks

# See if nvim spellfile will need to be recompiled
SpellFile="$XDG_CONFIG_HOME/nvim/spell/en.utf-8.add"
if which nvim >/dev/null 2>&1
then
   if ! test -e "$SpellFile" || {
      ! diff -q "$SpellFile" spell/en.utf-8.add >/dev/null 2>&1
   }
   then
      compileSpellFile=yes
   fi
   if ! test -e "${SpellFile}.spl"
   then
      compileSpellFile=yes
   fi
else
   compileSpellFile=no
fi

## Install/Check

# Install Neovim files & NVIM related TOML files
process_files "$XDG_CONFIG_HOME/nvim" "
   $dot_config_files
   $toml_files
" . 0644 "$envPath"
chmod 0755 "$XDG_CONFIG_HOME/nvim"

# Remove/report no longer needed files and directories thru
remove_items "$remove_items"

# Create/report missing directories
ensure_dirs "$dirs_to_create"

## Post install/check tweaks

case "$OPTION_GIVEN" in
   install)
      # Recompiled spell file if necessary
      if test "$compileSpellFile" = yes
      then
         sf="${SpellFile##*/}" 
         sf_dir="${SpellFile%/*}"
         ( if cd "$sf_dir"
           then
              nvim --headless -c ":mkspell!$sf" -c 'q'
           fi )
      fi
      ;;
   check)
      # Indicate whether the spellfile will be recompiled on next install
      if test "$compileSpellFile" = yes
      then
         printf 'nvimInstall: Spellfile "%s" will be\n' "$SpellFile"
         printf '             recompiled on the next install.\n\n'
      fi
      ;;
   remove)
      remove_items "$XDG_CONFIG_HOME/nvim/lua/grs"
      :
      ;;
esac
