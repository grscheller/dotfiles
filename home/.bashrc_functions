#!/bin/bash
#
#  ~/.bashrc_functions
#
#  Function definitions used by ~/.bashrc
#

## Command line utility functions
#  Jump up multiple directories
ud () {
  local upDir=..
  local nDirs="$1"
  if [[ $nDirs == @([1-9])*([0-9]) ]]
  then
      until (( nDirs-- <= 1 ))
      do
          upDir=../$upDir
      done
  fi
  cd $upDir || return
}

# Similar to the DOS path command
path () {
  if (( $# == 0 ))
  then
      PathWord="$PATH"
  else
      PathWord="$1"
  fi

  ( IFS=':'
    printf '%s\n' $PathWord )
}

# Drill down through $PATH to look for files or directories.
# Like the ksh builtin whence, except it does not stop
# after finding the first instance.  Handles spaces in both
# filenames and directories on $PATH.  Also, shell patterns
# are supported.
digpath () (
  usage_digpath () {
    printf 'Usage: digpath [-q] [-x] file1 file2 ...\n'       >&2
    printf '       digpath [-q] [-x] shell_pattern\n'         >&2
    printf '       digpath [-h]\n\n'                          >&2
    printf 'Output: print any matches on $PATH to stdout,\n'  >&2
    printf '        suppresses output if -q given,\n'         >&2
    printf '        suppresses nonexecutables if -x given,\n' >&2
    printf '        print help to stderr if -h given\n\n'     >&2
    printf 'Exit Status: 0 (true) if match found on $PATH\n'  >&2
    printf '             1 (false) if no match found\n'       >&2
    printf '             2 -h or --help option was given\n'   >&2
  }

  local OPTIND opt
  local quiet_flag=
  while getopts :hqx opt
  do
    case $opt in
      q) quiet_flag=1
         ;;
      x) executable_flag=1
         ;;
      h) usage_digpath
         return 2
         ;;
      ?) printf 'Error: invalid option %s\n' "$OPTARG"  >&2
         usage_digpath
         return 2
         ;;
    esac
  done

  IFS=':'

  local ii=0  # for array index
  local File Target
  local FileList=()

  for File in "$@"
  do
     [[ -z "$File" ]] && continue
     for Dir in $PATH
     do
        [[ ! -d "$Dir" ]] && continue
        for Target in $Dir/$File
        do
            if [[ -f $Target ]]
            then
                if [[ -z $executable_flag ]] || [[ -x $Target ]]
                then
                    FileList[((ii++))]="$Target"
                fi
            fi
        done
     done
  done

  [[ -z $quiet_flag ]] && printf '%s\n' "${FileList[@]}"

  if ((${#FileList[@]} > 0))
  then
      return 0
  else
      return 1
  fi
)


# Archive eXtractor: usage: ax <file>
ax () {
  if [[ -f $1 ]]
  then
      case $1 in
        *.tar)     tar -xvf "$1"               ;;
        *.tar.bz2) tar -xjvf "$1"              ;;
        *.tbz2)    tar -xjvf "$1"              ;;
        *.tar.gz)  tar -xzvf "$1"              ;;
        *.tgz)     tar -xzvf "$1"              ;;
        *.tar.Z)   tar -xZvf "$1"              ;;
        *.gz)      gunzip "$1"                 ;;
        *.bz2)     bunzip2 "$1"                ;;
        *.zip)     unzip "$1"                  ;;
        *.Z)       uncompress "$1"             ;;
        *.rar)     unrar x "$1"                ;;
        *.tar.xz)  xz -dc "$1" | tar -xvf -    ;;
        *.tar.7z)  7za x -so "$1" | tar -xvf - ;;
        *.7z)      7z x "$1"                   ;;
        *.tar.zst) zstd -dc "$1" | tar -xvf -  ;;
        *.zst)     zstd -d "$1"                ;;
        *.cpio)    cpio -idv < "$1"            ;;
        *) printf 'ax: error: "%s" unknown file type' "$1"  >&2 ;;
      esac
  else
      if [[ -n $1 ]]
      then
          printf 'ax: error: "%s" is not a file' "$1" >&2
      else
          printf 'ax: error: No file argument given' >&2
      fi
  fi
}

# Convert between various bases (use capital A-F for hex-digits)
#
#   Examples: h2d "AA + BB" -> 357
#             h2h "AA + BB" -> 165
#             d2h 357       -> 165
#
h2h () { printf 'ibase=16\nobase=10\n%s\n'   "$*" | /usr/bin/bc; }
h2d () { printf 'ibase=16\nobase=A\n%s\n'    "$*" | /usr/bin/bc; }
h2o () { printf 'ibase=16\nobase=8\n%s\n'    "$*" | /usr/bin/bc; }
h2b () { printf 'ibase=16\nobase=2\n%s\n'    "$*" | /usr/bin/bc; }
d2h () { printf 'ibase=10\nobase=16\n%s\n'   "$*" | /usr/bin/bc; }
d2d () { printf 'ibase=10\nobase=10\n%s\n'   "$*" | /usr/bin/bc; }
d2o () { printf 'ibase=10\nobase=8\n%s\n'    "$*" | /usr/bin/bc; }
d2b () { printf 'ibase=10\nobase=2\n%s\n'    "$*" | /usr/bin/bc; }
o2h () { printf 'ibase=8\nobase=20\n%s\n'    "$*" | /usr/bin/bc; }
o2d () { printf 'ibase=8\nobase=12\n%s\n'    "$*" | /usr/bin/bc; }
o2o () { printf 'ibase=8\nobase=10\n%s\n'    "$*" | /usr/bin/bc; }
o2b () { printf 'ibase=8\nobase=2\n%s\n'     "$*" | /usr/bin/bc; }
b2h () { printf 'ibase=2\nobase=10000\n%s\n' "$*" | /usr/bin/bc; }
b2d () { printf 'ibase=2\nobase=1010\n%s\n'  "$*" | /usr/bin/bc; }
b2o () { printf 'ibase=2\nobase=1000\n%s\n'  "$*" | /usr/bin/bc; }
b2b () { printf 'ibase=2\nobase=10\n%s\n'    "$*" | /usr/bin/bc; }

## Launch Desktop GUI Apps from command line
#  Open Desktop file manager
fm () {
  local DiR="$1"
  [[ -n $DiR ]] || DiR="$PWD"
  xdg-open "$DiR" 2>/dev/null &
}

# Terminal which inherits environment of parent shell
tm () {
  if [[ -x /usr/bin/alacritty ]]; then
      ( /usr/bin/alacritty -e bash & )
  elif [[ -x /usr/local/bin/alacritty ]]; then
      ( /usr/local/bin/alacritty -e bash & )
  elif [[ -x /usr/bin/gnome-terminal ]]; then
      ( /usr/bin/gnome-terminal >&- 2>&- )
  elif [[ -x /usr/bin/urxvt ]]; then
      ( /usr/bin/urxvt >/dev/null 2>&1 & )
  elif [[ -x /usr/bin/xterm ]]; then
      ( /usr/bin/xterm >/dev/null 2>&1 & )
  else
      printf "tm: error: terminal emulator not found\n" >&2
  fi
}

## GUI-land apps
#  PDF Reader
ev () ( /usr/bin/evince "$@" >/dev/null 2>&1 & )

# LBRY AppImage
lbry () {
  local LBRY_Dir=~/opt/AppImages
  # shellcheck disable=SC2206
  local LBRY_App=(${LBRY_Dir}/LBRY_*.AppImage)

  (( ${#LBRY_App[@]} > 1  )) && {
      printf "  Error: Multiple LBRY apps found in :\n"
      printf "\t%s\n" "${LBRY_App[@]}"
      return 1
  }

  [[ ${LBRY_App[0]} == ${LBRY_Dir}/LBRY_/*.AppImage ]] && {
      printf '  Error: LBRY app not found in %s\n' "$LBRY_Dir"
      return 1
  }

  ( ${LBRY_App[0]} >/dev/null 2>&1 & )
}

# Firefox Browser
ff () {
  if digpath -q firefox
  then
      ( firefox "$@" >&- 2>&- & )
  else
      printf 'firefox not found\n' >&2
  fi
}

# LibreOffice
lo () ( /usr/bin/libreoffice & )

# LibreOffice writer
low () ( /usr/bin/libreoffice --writer "$@" & )

## For non-Systemd systems
#  Supply a phony hostnamectl command
if ! digpath -q hostnamectl
then
    function hostnamectl { hostname; }
fi

## Software development related functions
#  Setup JDK on Arch
archJDK () {
  local version="$1"
  local jdir
  local jver

  if [[ -z $version ]]
  then
      printf "\nAvailable Java Versions:"
      for jdir in /usr/lib/jvm/java-*-openjdk
      do
          jver=${jdir%-*}
          jver=${jver#*-}
          printf ' %s' "$jver"
      done
      printf '\n'
      return 0
  fi

  if [[ ! $version == @([1-9])*([0-9]) ]]
  then
      printf 'Malformed JDK version number: "%s"\n' "$version" >&2
      return 1
  fi

  if [[ -d /usr/lib/jvm/java-${version}-openjdk ]]
  then
      export JAVA_HOME=/usr/lib/jvm/java-${version}-openjdk
      if [[ $PATH == /usr/lib/jvm/java-@([1-9])*([0-9])-openjdk/bin:* ]]
      then
          PATH=${PATH#[^:]*:}
      fi
      PATH=$JAVA_HOME/bin:$PATH
      return 0
  else
      printf '\nNo JDK found for Java version %s in the\n' "$version" >&2
      printf 'standard location on Arch Linux: /usr/lib/jvm/\n' >&2
      return 1
  fi
}
